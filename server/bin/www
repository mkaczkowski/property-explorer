#!/usr/bin/env node
const debug = require('debug')('PropertyExplorer');
const http = require('http');
const dotenv = require('dotenv');
const mongoose = require('mongoose');
debug('booting %o', 'PropertyExplorer');

// env variables
dotenv.config({ path: 'variables.env' });

// Connect to database
mongoose.connect(process.env.DATABASE, { useNewUrlParser: true });
mongoose.Promise = global.Promise; // use ES6 Promise with mongoose
mongoose.connection.on('error', err => {
// eslint-disable-next-line no-console
  console.error(err.message);
});

// import  models
require('../src/models/Property');

const app = require('../src/app');
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

//Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
